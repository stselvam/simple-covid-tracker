{"version":3,"sources":["Components/Cards/index.jsx","Api/index.js","Components/Chart/index.jsx","Components/CountryPicker/index.jsx","App/App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","apiurl","fetchData","country","a","retrieveUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchDailyDataApi","lineVisualizer","length","labels","datasets","label","borderColor","fill","backgroundColor","barVisualizer","options","legend","display","title","text","CountryPicker","handleCountryChange","countriesOptionsList","setCountriesListOptions","fetchCountriesApi","FormControl","NativeSelect","defaultValue","onChange","e","target","index","App","state","fetchedData","setState","this","src","alt","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.595c49ad.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport \"./Cards.css\";\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n  if(!confirmed) return \"Loading....\";\r\n  return (\r\n    <div className=\"cards___container\">\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={confirmed.value} duration={2.5} seperator=\",\"></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={recovered.value} duration={2.5} seperator=\",\"></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of recovered cases of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={deaths.value} duration={2.5} seperator=\",\"></CountUp>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of deaths cases of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import axios from \"axios\";\r\n\r\nconst apiurl = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let retrieveUrl = apiurl;\r\n    if(country) {\r\n        retrieveUrl = `${apiurl}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(retrieveUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${apiurl}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${apiurl}/countries`);\r\n        return countries.map((country) => country.name);\r\n        // return countries;\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport { fetchDailyData } from \"../../Api\";\r\n\r\nimport \"./Chart.css\";\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n\r\n    const [dailyData, setDailyData] = useState({})\r\n\r\n    useEffect(() => {\r\n        const fetchDailyDataApi = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        };\r\n        fetchDailyDataApi();\r\n    }, []);\r\n\r\n    const lineVisualizer = (\r\n        dailyData.length\r\n        ?\r\n            (<Line data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [\r\n                    {\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: \"Infected\",\r\n                        borderColor: \"#3333FF\",\r\n                        fill: true\r\n                    },\r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: \"Deaths\",\r\n                        borderColor: \"#FF0000\",\r\n                        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                        fill: true\r\n                    }\r\n                ],\r\n            }}/>)\r\n        : <div>Invalid Data!</div>\r\n    );\r\n\r\n    const barVisualizer = (\r\n        confirmed? (\r\n            <Bar data = {{\r\n                    labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                    datasets: [{\r\n                        label: \"People\",\r\n                        backgroundColor: [\r\n                            \"rgba(0, 0, 255, 0.5)\",\r\n                            \"rgba(0, 255, 0, 0.5)\",\r\n                            \"rgba(255, 0, 0, 0.5)\"\r\n                        ],\r\n                        data: [\r\n                            confirmed.value,\r\n                            recovered.value,\r\n                            deaths.value\r\n                        ]\r\n                    }]\r\n                }}\r\n                options = {{\r\n                    legend: { display: false },\r\n                    title: { title: true, text: `Present stats in ${country}` }\r\n            }}/>)\r\n        : <div>Invalid Data!</div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"chart___container\">\r\n            { country? barVisualizer: lineVisualizer }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../Api\";\r\n\r\nimport \"./CountryPicker.css\"\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countriesOptionsList, setCountriesListOptions] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchCountriesApi = async () => {\r\n      setCountriesListOptions(await fetchCountries());\r\n    }\r\n    fetchCountriesApi();\r\n  }, [])\r\n\r\n  return (\r\n    <FormControl className=\"country__picker__formtontrol\">\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countriesOptionsList.map((country, index) => <option key={index} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React from 'react';\nimport Cards from \"../Components/Cards\"; import Chart from \"../Components/Chart\"; import CountryPicker from \"../Components/CountryPicker\";\nimport \"./App.css\";\nimport { fetchData } from \"../Api\";\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: \"\",\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData})\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country: country});\n    // this.state.country = country;\n  }\n\n  render() {\n\n    const {data, country} = this.state;\n\n    return (\n      <div className=\"app___container\">\n        <img className=\"app__logo\" src=\"/logo.webp\" alt=\"\" />\n        <h1>Covid Stats Tracker</h1>\n        <Cards data={data}></Cards>\n        <CountryPicker handleCountryChange={this.handleCountryChange}></CountryPicker>\n        <Chart data={data} country={country}></Chart>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}